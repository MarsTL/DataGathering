# -*- coding: utf-8 -*-
"""beautiful soup

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zMyGFcIO5gzSSB7oA7Rc6XyXlvvfPCw5
"""

from urllib.request import urlopen
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
import re
import numpy as np

url = "http://www.hubertiming.com/results/2017GPTR10K"
html = urlopen(url)
soup = BeautifulSoup(html, 'lxml')

print(type(soup))

# Get the title
title = soup.title
print(title)

# Print out the text
text = soup.get_text()
print(soup.text)

# Extract all hyperlinks
all_links = soup.find_all("a")
for link in all_links:
    print(link.get("href"))

# Print the first 10 rows for sanity check
rows = soup.find_all('tr')
print(rows[:10])

list_rows = []
for row in rows:
    cells = row.find_all('td')
    str_cells = str(cells)
    clean = re.compile('<.*?>')
    clean2 = (re.sub(clean, '',str_cells))
    list_rows.append(clean2)
print(clean2)
type(clean2)

df = pd.DataFrame(list_rows)
df.head(10)

df1 = df[0].str.split(',', expand=True)
df1.head(10)

df1[0] = df1[0].str.strip('[')
df1.head(10)

col_labels = soup.find_all('th')
# Convert the header cells to string
col_str = str(col_labels)

# Use BeautifulSoup again to strip away any HTML tags
cleantext2 = BeautifulSoup(col_str, "lxml").get_text()

# Append the cleaned header string to a list
all_header = []
all_header.append(cleantext2)

# Print the header row as a list
print(all_header)

df2 = pd.DataFrame(all_header)
df2.head()

df3 = df2[0].str.split(',', expand=True)
df3.head()

frames = [df3, df1]
df4 = pd.concat(frames, ignore_index=True)
df4.head(10)

df5 = df4.rename(columns=df4.iloc[0])  # Use the first row as header
df5 = df5.drop(df5.index[0])           # Drop the old header row
df5.head()

print(df5.info())   # Overview: data types, non-null counts
print(df5.shape)    # Tuple: (rows, columns)

df6 = df5.dropna(axis=0, how='any')

print(df6.info())    # Should now show all columns with consistent non-null values
print(df6.shape)     # New dimensions of the cleaned dataset

df7 = df6.drop(df6.index[0])
df7.head()

df7.rename(columns={'[Place': 'Place'},inplace=True)
df7.rename(columns={' Team]': 'Team'},inplace=True)
df7.head()

df7['Team'] = df7['Team'].str.strip(']')
df7.head()

time_list = df7[' Time'].tolist()

# Convert 'Time' to minutes
time_mins = []
for i in time_list:
    time_parts = i.split(':')

    # If the time string doesn't have 3 parts (hours, minutes, seconds)
    if len(time_parts) == 2:
        # Handle cases where the format is "mm:ss"
        m, s = time_parts
        h = 0
    elif len(time_parts) == 3:
        # Standard format "hh:mm:ss"
        h, m, s = time_parts
    else:
        # Skip if the format is not valid
        continue

    # Convert time to minutes
    math = (int(h) * 3600 + int(m) * 60 + int(s)) / 60
    time_mins.append(math)

# Check the first few values of time_mins
print(time_mins[:10])

# Create a new column 'Runner_mins' in df7 with the time in minutes
df7['Runner_mins'] = time_mins

# Check the first few rows of the dataframe to see the new column
df7.head()

df7.describe(include=[np.number])

from pylab import rcParams
import matplotlib.pyplot as plt

# Set the figure size for all plots
rcParams['figure.figsize'] = 15, 5

# Create a boxplot for the 'Runner_mins' column
df7.boxplot(column='Runner_mins')

# Add grid lines along the y-axis
plt.grid(True, axis='y')

# Set the y-axis label
plt.ylabel('Chip Time')

# Set x-tick labels
plt.xticks([1], ['Runners'])

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Extract the 'Runner_mins' column from df7
x = df7['Runner_mins']

# Plot histogram with KDE (Kernel Density Estimate)
plt.figure(figsize=(10, 6))
sns.histplot(x, kde=True, color='m', bins=25, edgecolor='black')

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
f_fuko = df7.loc[df7[' Gender']==' F']['Runner_mins']
m_fuko = df7.loc[df7[' Gender']==' M']['Runner_mins']

sns.distplot(f_fuko, hist=True, kde=True, rug=False, hist_kws={'edgecolor':'black'}, label='Female')
sns.distplot(m_fuko, hist=False, kde=True, rug=False, hist_kws={'edgecolor':'black'}, label='Male')

plt.legend()

# Show the plot
plt.show()

# Group by 'Gender' and compute summary statistics for 'Runner_mins'
g_stats = df7.groupby(" Gender")['Runner_mins'].describe()

# Print the group statistics
print(g_stats)

# Create a side-by-side boxplot comparing 'Runner_mins' by 'Gender'

df7.boxplot(column='Runner_mins', by=' Gender')
plt.ylabel('Chip Time')
plt.suptitle("")